{"version":3,"sources":["components/imageCards/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","state","hovered","hover","id","element","thisElement","document","getElementById","getElementsByClassName","forEach","call","image","classList","remove","add","_this2","this","props","react_default","a","createElement","className","onMouseEnter","src","alt","Component","API","axios","get","App","photos","photos1","photos2","getPhotos","then","res","setState","data","split","length","i","push","_this3","map","photo","imageCards","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c83dd70e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './style.css';\r\n\r\nclass ImageCard extends Component {\r\n\r\n    state = {\r\n        hovered: false\r\n    };\r\n\r\n    // On hover adds class to make image span 2 rows and 2 columns\r\n    hover = id => {\r\n        const thisElement = document.getElementById(id);\r\n        let element;\r\n        // Determines what set of photos is hovered, making sure there is only one hovered photo per set\r\n        if (id < 10) {\r\n            element = document.getElementsByClassName('images1');\r\n        } else {\r\n            element = document.getElementsByClassName('images2');\r\n        }\r\n        // Removes hovered class from each image of the set\r\n            [].forEach.call(element, function(image) {\r\n            image.classList.remove(\"hovered\");\r\n        });\r\n        // Adds the hovered class for the specific image hovered\r\n        thisElement.classList.add(\"hovered\");\r\n    }\r\n\r\n\r\n    render() {\r\n        // Returns div with different classes to distinguish the set of photos, also defaults 1 from each to already be hovered\r\n        if (this.props.id === 3) {\r\n            return(\r\n                <div id={this.props.id} className='hovered images1' onMouseEnter={() => this.hover(this.props.id)}>\r\n                    <img className='tileImages'src={this.props.image} alt='CHANGE'></img>\r\n                </div>\r\n                )\r\n        } else if (this.props.id === 16) {\r\n            return(\r\n                <div id={this.props.id} className='hovered images2' onMouseEnter={() => this.hover(this.props.id)}>\r\n                    <img className='tileImages' src={this.props.image} alt='CHANGE'></img>\r\n                </div>\r\n                )\r\n        } else if (this.props.id < 10) {\r\n            return(\r\n                <div id={this.props.id} className='images1' onMouseEnter={() => this.hover(this.props.id)}>\r\n                    <img className='tileImages' src={this.props.image} alt='CHANGE'></img>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div id={this.props.id} className='images2' onMouseEnter={() => this.hover(this.props.id)}>\r\n                    <img className='tileImages' src={this.props.image} alt ='CHANGE'></img>\r\n                </div>\r\n        )\r\n        }\r\n}\r\n}\r\n\r\nexport default ImageCard;","import axios from 'axios';\r\n\r\nexport default {\r\n    // Axios call for getting information based on the routes\r\n    findPhoto: function() {\r\n        return axios.get('/api/photo');\r\n    },\r\n\r\n    addPhoto: function(info) {\r\n        return axios.post('api/photo/add', info);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\n// import photos from './photos.json';\r\nimport ImageCard from './components/imageCards';\r\nimport API from './utils/API';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    photos: [],\r\n    photos1: [],\r\n    photos2: []\r\n  }\r\n\r\n  // When loading calls split function\r\n  componentDidMount() {\r\n    this.getPhotos();\r\n  }\r\n\r\n  getPhotos() {\r\n    // API sends it to the API.js file in /utils\r\n    API.findPhoto({}).then(res => {\r\n      this.setState({photos: res.data});\r\n      this.split();\r\n    })\r\n  }\r\n\r\n  // Splits images into to groups to be used in two seperate grids\r\n  split() {\r\n    let length = this.state.photos.length;\r\n    let photos1 = [];\r\n    let photos2 = [];\r\n    for (let i = 0; i < length; i++) {\r\n      if (i < 9) {\r\n        photos1.push(this.state.photos[i]);\r\n      } else {\r\n        photos2.push(this.state.photos[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({photos1: photos1});\r\n    this.setState({photos2: photos2});\r\n  }\r\n\r\n  render () {\r\n    return(\r\n    <div>\r\n      <div className='wrapper'>\r\n        {this.state.photos1.map(photo => (\r\n          <ImageCard\r\n          key={photo.id}\r\n          id={photo.id}\r\n          image={photo.photo}\r\n          hover={this.hover}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className='wrapper'>\r\n        {this.state.photos2.map(photo => (\r\n          <ImageCard\r\n          key={photo.id}\r\n          id={photo.id}\r\n          image={photo.photo}\r\n          hover={this.hover}\r\n          />\r\n        ))}\r\n      </div>\r\n      </div>\r\n  \r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}